{"version":3,"sources":["../src/rendering.js"],"names":["link","scope","elem","attrs","ctrl","$panelContainer","find","refreshed","setHeight","panel","height","_","isString","parseInt","replace","style","myChart","echarts","init","setTimeout","resize","getData","chartType","name","value","dname","data","console","log","i","length","push","forname","key","nameMap","geoCoordMap","render","convertData","item","res","fromCoord","toCoord","coord","scatterData","dataformate","cityData","series","chartSerilaName","type","coordinateSystem","symbolSize","label","normal","show","emphasis","itemStyle","borderColor","borderWidth","center","clear","chartName","serialName","chartMin","min","chartMax","max","option","title","text","left","textStyle","color","fontSize","backgroundColor","tooltip","trigger","padding","legend","orient","visualMap","calculable","inRange","mapType","hoverable","roam","areaColor","setOption","window","$","getJSON","then","Json","registerMap","formatter","params","geo","map","planePath","colors","forEach","zlevel","effect","period","trailLength","lineStyle","width","curveness","symbol","opacity","rippleEffect","brushType","position","regions","selected","events","on","renderingCompleted"],"mappings":"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","file":"rendering.js","sourcesContent":["import echarts from './libs/echarts.min';\r\nimport _ from \"lodash\";\r\nimport './libs/geocoord';\r\nexport default function link(scope, elem, attrs, ctrl) {\r\n  const $panelContainer = elem.find('.echarts-grafana')[0];\r\n  ctrl.refreshed = true;\r\n  function setHeight() {\r\n    let panel=ctrl.panel;\r\n    let height = ctrl.height || panel.height;\r\n    if (_.isString(height)) {\r\n      height = parseInt(height.replace('px', ''), 10);\r\n    }\r\n    $panelContainer.style.height = height + 'px';\r\n  }\r\n  setHeight();\r\n\r\n  let myChart = echarts.init($panelContainer, 'dark');\r\n\r\n  setTimeout(function () {\r\n    myChart.resize();\r\n  }, 1000);\r\n  function getData(chartType) {\r\n    const {name, value,dname} = ctrl;\r\n    let data =[];\r\n    console.log(name);\r\n    if (name){\r\n      switch (chartType) {\r\n        case 'ChinaMap':\r\n          for (let i = 0; i < name.length; i++) {\r\n            data.push({name: name[i], value: value[i]});\r\n          }\r\n          return data;\r\n        case 'WorldMap':\r\n          let forname;\r\n          for(let key in nameMap) {\r\n            for (let i=0;i<name.length;i++){\r\n              if( nameMap[key] === name[i]){\r\n                forname = key;\r\n                data.push({name:forname,value:value[i]});\r\n              }\r\n            }\r\n          }\r\n          return data;\r\n        case 'ChinaGeo':\r\n          for(let i=0;i<name.length;i++){\r\n            if(geoCoordMap[name[i]].length<=2){\r\n              geoCoordMap[name[i]].push(parseInt(value[i]))\r\n            }\r\n            data.push({name:name[i], value:geoCoordMap[name[i]]})\r\n          }\r\n          return data;\r\n        case 'WorldGeo':\r\n          for(let i=0;i<name.length;i++){\r\n            console.log(name[i]);\r\n            if (typeof (geoCoordMap[name[i]])!==\"undefined\"){\r\n              if(geoCoordMap[name[i]].length<=2){\r\n                console.log(\"===3==\");\r\n                geoCoordMap[name[i]].push(parseInt(value[i]))\r\n              }\r\n              data.push({name:name[i], value:geoCoordMap[name[i]]})\r\n            }\r\n          }\r\n          return data;\r\n        case 'ChinaFlow':\r\n          for (let i = 0; i < name.length; i++) {\r\n            data.push({name: name[i], value: value[i],dname:dname[i]});\r\n          }\r\n          return data;\r\n        case 'WorldFlow':\r\n          for (let i = 0; i < name.length; i++) {\r\n            data.push({name: name[i], value: value[i],dname:dname[i]});\r\n          }\r\n          return data;\r\n      }\r\n    }\r\n\r\n  }\r\n  function render() {\r\n\r\n    if (!myChart) {\r\n      return;\r\n    }\r\n\r\n    setHeight();\r\n    myChart.resize();\r\n\r\n    if (ctrl.refreshed) {\r\n      let convertData = function(item) {\r\n        let res = [];\r\n        let fromCoord = geoCoordMap[item.name];\r\n        let toCoord = geoCoordMap[item.dname];\r\n        if(fromCoord && toCoord) {\r\n          res.push([{\r\n            coord: fromCoord // 起点坐标\r\n          }, {\r\n            coord: toCoord // 终点坐标\r\n          }])\r\n        }\r\n        return res;\r\n      };\r\n      let scatterData=function(item){\r\n        let dataformate =[];\r\n        dataformate.push({name:item.dname,value:geoCoordMap[item.dname]});\r\n        return dataformate\r\n      };\r\n      let cityData=function(item) {\r\n        let dataformate =[];\r\n        if (geoCoordMap[item.name].length<=2){\r\n          geoCoordMap[item.name].push(parseInt(item.value));\r\n        }\r\n        dataformate.push({name:item.name,value:geoCoordMap[item.name]});\r\n        return dataformate\r\n      };\r\n      let series= [\r\n        {\r\n          name: chartSerilaName,\r\n          type: 'effectScatter',\r\n          coordinateSystem: 'geo',\r\n          symbolSize: 12,\r\n          label: {\r\n            normal: {\r\n              show: false\r\n            },\r\n            emphasis: {\r\n              show: false\r\n            }\r\n          },\r\n          itemStyle: {\r\n            emphasis: {\r\n              borderColor: '#fff',\r\n              borderWidth: 1\r\n            }\r\n          },\r\n          center: [-6.6796875,32.84267363195431],\r\n        }];\r\n      myChart.clear();\r\n      let chartName = ctrl.panel.chartName;\r\n      let chartType = ctrl.panel.chartType;\r\n      let chartSerilaName = ctrl.panel.serialName;\r\n      let chartMin = ctrl.panel.min;\r\n      let chartMax = ctrl.panel.max;\r\n      if (!chartMin || !chartMax){\r\n        chartMin=1;\r\n        chartMax=100;\r\n      }\r\n\r\n      if (chartType === 'ChinaMap') {\r\n        let data = getData(chartType);\r\n        const option = {\r\n          title: {\r\n            text: chartName,\r\n            left: 'center',\r\n            textStyle: {color: '#ffffff', fontSize: 12}\r\n          },\r\n          backgroundColor: '#404a59',\r\n          tooltip: {\r\n            trigger: 'item',\r\n            padding: 10,\r\n            backgroundColor: 'rgba(20,20,20,0.8)',\r\n          },\r\n          legend: {\r\n            orient: 'vertical',\r\n            left: 'left'\r\n          },\r\n          visualMap: {\r\n            min: chartMin,\r\n            max: chartMax,\r\n            calculable: true,\r\n            inRange: {\r\n              color: ['#50a3ba', '#eac736', '#d94e5d']\r\n            },\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          series: [\r\n            {\r\n              name: chartSerilaName,\r\n              type: 'map',\r\n              mapType: 'china',\r\n              hoverable: true,\r\n              roam: true,\r\n              label: {\r\n                normal: {\r\n                  show: false\r\n                },\r\n                emphasis: {\r\n                  show: false\r\n                }\r\n              },\r\n              itemStyle: {\r\n                normal: {label: {show: true}, areaColor: '#edf2f1'},\r\n                emphasis: {label: {show: true}, areaColor: '#ffeb59'}\r\n              },\r\n              data: data\r\n            }\r\n          ]\r\n        };\r\n        myChart.setOption(option);\r\n        window.$.getJSON('public/plugins/echarts-grafana/data/china.json').then((Json) => {\r\n          echarts.registerMap('china', Json);\r\n        });\r\n      }\r\n\r\n      if (chartType === 'ChinaGeo') {\r\n        let data = getData(chartType);\r\n        const option = {\r\n          title: {\r\n            text: chartName,\r\n            left: 'center',\r\n            textStyle: {color: '#ffffff', fontSize: 12}\r\n          },\r\n          backgroundColor: '#404a59',\r\n          tooltip: {\r\n            trigger: 'item',\r\n            formatter: function (params) {\r\n              return params.name + ' : ' + params.value[2];\r\n            },\r\n            padding: 10,\r\n            backgroundColor: 'rgba(20,20,20,0.8)',\r\n          },\r\n          legend: {\r\n            orient: 'vertical',\r\n            left: 'left'\r\n          },\r\n          visualMap: {\r\n            min: chartMin,\r\n            max: chartMax,\r\n            calculable: true,\r\n            inRange: {\r\n              color: ['#50a3ba', '#eac736', '#d94e5d']\r\n            },\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          geo: {\r\n            map: 'china',\r\n            roam:true,\r\n            label: {\r\n              emphasis: {\r\n                show: false\r\n              }\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                areaColor: '#323c48',\r\n                borderColor: '#111'\r\n              },\r\n              emphasis: {\r\n                areaColor: '#2a333d'\r\n              }\r\n            }\r\n          },\r\n\r\n          series: [\r\n            {\r\n              name: chartSerilaName,\r\n              type: 'effectScatter',\r\n              coordinateSystem: 'geo',\r\n              symbolSize: 12,\r\n              label: {\r\n                normal: {\r\n                  show: false\r\n                },\r\n                emphasis: {\r\n                  show: false\r\n                }\r\n              },\r\n              itemStyle: {\r\n                emphasis: {\r\n                  borderColor: '#fff',\r\n                  borderWidth: 1\r\n                }\r\n              },\r\n              data: data\r\n            }\r\n          ]\r\n        };\r\n        myChart.setOption(option);\r\n        window.$.getJSON('public/plugins/echarts-grafana/data/china.json').then((Json) => {\r\n          echarts.registerMap('china', Json);\r\n        });\r\n      }\r\n\r\n      if (chartType === 'WorldMap') {\r\n        let data = getData(chartType);\r\n        const option = {\r\n          title: {\r\n            text: chartName,\r\n            left: 'center',\r\n            textStyle: {color: '#ffffff', fontSize: 12}\r\n          },\r\n          backgroundColor: '#404a59',\r\n          tooltip: {\r\n            trigger: 'item',\r\n            padding: 10,\r\n            backgroundColor: 'rgba(20,20,20,0.8)',\r\n          },\r\n          legend: {\r\n            orient: 'vertical',\r\n            left: 'left'\r\n          },\r\n          visualMap: {\r\n            min: chartMin,\r\n            max: chartMax,\r\n            calculable: true,\r\n            inRange: {\r\n              color: ['#50a3ba', '#eac736', '#d94e5d']\r\n            },\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          series: [\r\n            {\r\n              name: chartSerilaName,\r\n              type: 'map',\r\n              mapType: 'world',\r\n              hoverable: true,\r\n              roam: true,\r\n              label: {\r\n                normal: {\r\n                  show: false\r\n                },\r\n                emphasis: {\r\n                  show: false\r\n                }\r\n              },\r\n              itemStyle: {\r\n                normal: {label: {show: true}, areaColor: '#edf2f1'},\r\n                emphasis: {label: {show: true}, areaColor: '#ffeb59'}\r\n              },\r\n              center: [-6.6796875,32.84267363195431],\r\n              data: data\r\n            }\r\n          ]\r\n        };\r\n        myChart.setOption(option);\r\n        window.$.getJSON('public/plugins/echarts-grafana/data/world.json').then((Json) => {\r\n          echarts.registerMap('world', Json);\r\n        });\r\n      }\r\n\r\n      if (chartType === 'WorldGeo'){\r\n        let data =getData(chartType);\r\n        const option = {\r\n          title: {\r\n            text: chartName,\r\n            left: 'center',\r\n            textStyle: {color: '#ffffff', fontSize: 12}\r\n          },\r\n          backgroundColor: '#404a59',\r\n          tooltip: {\r\n            trigger: 'item',\r\n            formatter: function (params) {\r\n              return params.name + ' : ' + params.value[2];\r\n            },\r\n            padding: 10,\r\n            backgroundColor: 'rgba(20,20,20,0.8)',\r\n          },\r\n          legend: {\r\n            orient: 'vertical',\r\n            left: 'left'\r\n          },\r\n          visualMap: {\r\n            min: chartMin,\r\n            max: chartMax,\r\n            calculable: true,\r\n            inRange: {\r\n              color: ['#50a3ba', '#eac736', '#d94e5d']\r\n            },\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          geo: {\r\n            map: 'world',\r\n            roam:true,\r\n            label: {\r\n              emphasis: {\r\n                show: false\r\n              }\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                areaColor: '#323c48',\r\n                borderColor: '#111'\r\n              },\r\n              emphasis: {\r\n                areaColor: '#2a333d'\r\n              }\r\n            }\r\n          },\r\n\r\n          series: [\r\n            {\r\n              name: chartSerilaName,\r\n              type: 'effectScatter',\r\n              coordinateSystem: 'geo',\r\n              symbolSize: 12,\r\n              label: {\r\n                normal: {\r\n                  show: false\r\n                },\r\n                emphasis: {\r\n                  show: false\r\n                }\r\n              },\r\n              itemStyle: {\r\n                emphasis: {\r\n                  borderColor: '#fff',\r\n                  borderWidth: 1\r\n                }\r\n              },\r\n              center: [-6.6796875,32.84267363195431],\r\n\r\n              data: data\r\n            }\r\n          ]\r\n\r\n        };\r\n        myChart.setOption(option);\r\n        window.$.getJSON('public/plugins/echarts-grafana/data/world.json').then((Json) => {\r\n          echarts.registerMap('world', Json);\r\n        });\r\n      }\r\n\r\n      if (chartType === 'WorldFlow') {\r\n        let planePath = 'path://M1705.06,1318.313v-89.254l-319.9-221.799l0.073-208.063c0.521-84.662-26.629-121.796-63.961-121.491c-37.332-0.305-64.482,36.829-63.961,121.491l0.073,208.063l-319.9,221.799v89.254l330.343-157.288l12.238,241.308l-134.449,92.931l0.531,42.034l175.125-42.917l175.125,42.917l0.531-42.034l-134.449-92.931l12.238-241.308L1705.06,1318.313z';\r\n        let colors = ['#9ae5fc', '#dcbf71']; // 自定义图中要用到的颜色\r\n        let data = getData(chartType);\r\n        data.forEach(function (item){\r\n          series.push({\r\n              // 白色航线特效图\r\n              type: 'lines',\r\n              zlevel: 1, // 用于分层，z-index的效果\r\n              effect: {\r\n                show: true, // 动效是否显示\r\n                period: 6, // 特效动画时间\r\n                trailLength: 0.7, // 特效尾迹的长度\r\n                color: '#fff', // 特效颜色\r\n                symbolSize: 3 // 特效大小\r\n              },\r\n              lineStyle: {\r\n                normal: { // 正常情况下的线条样式\r\n                  color: colors[0],\r\n                  width: 0, // 因为是叠加效果，要是有宽度，线条会变粗，白色航线特效不明显\r\n                  curveness: -0.2 // 线条曲度\r\n                }\r\n              },\r\n              data: convertData(item) // 特效的起始、终点位置\r\n            }, { // 小飞机航线效果\r\n              type: 'lines',\r\n              zlevel: 2,\r\n              symbol: ['none', 'arrow'], // 用于设置箭头\r\n              symbolSize: 10,\r\n              effect: {\r\n                show: true,\r\n                period: 6,\r\n                trailLength: 0,\r\n                symbol: planePath, // 特效形状，可以用其他svg pathdata路径代替\r\n                symbolSize: 15\r\n              },\r\n              lineStyle: {\r\n                normal: {\r\n                  color: colors[0],\r\n                  width: 1,\r\n                  opacity: 0.6,\r\n                  curveness: -0.2\r\n                }\r\n              },\r\n              data: convertData(item), // 特效的起始、终点位置，一个二维数组，相当于coords: convertData(item[1])\r\n            }, { // 散点效果\r\n            type: 'effectScatter',\r\n            coordinateSystem: 'geo',\r\n            zlevel: 3,\r\n            rippleEffect: {\r\n              brushType: 'stroke'\r\n            },\r\n            label: {\r\n              normal: {\r\n                show: true,\r\n                position: 'left',\r\n                formatter: '{b}'\r\n              }\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                color: colors[1]\r\n              }\r\n            },\r\n              data: cityData(item)\r\n            }\r\n\r\n          );\r\n          series.push({\r\n            type: 'effectScatter',\r\n            coordinateSystem: 'geo',\r\n            zlevel: 3,\r\n            rippleEffect: {\r\n              brushType: 'stroke'\r\n            },\r\n            label: {\r\n              normal: {\r\n                show: true,\r\n                position: 'left',\r\n                formatter: '{b}'\r\n              }\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                color: colors[1]\r\n              }\r\n            },\r\n            data: scatterData(item)\r\n          })\r\n        });\r\n        const option = {\r\n          title: {\r\n            text: chartName,\r\n            left: 'center',\r\n            textStyle: {color: '#ffffff', fontSize: 12}\r\n          },\r\n          backgroundColor: '#404a59',\r\n          tooltip: {\r\n            trigger: 'item',\r\n            formatter: function (params) {\r\n              if (params.name){\r\n                return params.name\r\n              }else if(params.data.coord) {\r\n                return params.data.coord[2]\r\n              }\r\n            },\r\n            padding: 10,\r\n            backgroundColor: 'rgba(20,20,20,0.8)',\r\n          },\r\n          legend: {\r\n            orient: 'vertical',\r\n            left: 'left'\r\n          },\r\n          visualMap: {\r\n            min: chartMin,\r\n            max: chartMax,\r\n            calculable: true,\r\n            inRange: {\r\n              color: ['#50a3ba', '#eac736', '#d94e5d']\r\n            },\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          geo: {\r\n            map: 'world',\r\n            roam: true,\r\n            label: {\r\n              emphasis: {\r\n                show: false\r\n              }\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                areaColor: '#323c48',\r\n                borderColor: '#111'\r\n              },\r\n              emphasis: {\r\n                areaColor: '#2a333d'\r\n              }\r\n            },\r\n            regions: [{ // 选中的区域\r\n              name: 'China',\r\n              selected: true,\r\n              itemStyle: { // 高亮时候的样式\r\n                emphasis: {\r\n                  areaColor: '#7d7d7d'\r\n                }\r\n              },\r\n              label: { // 高亮的时候不显示标签\r\n                emphasis: {\r\n                  show: false\r\n                }\r\n              }\r\n            }]\r\n          },\r\n          series :series,\r\n        };\r\n        myChart.setOption(option);\r\n        window.$.getJSON('public/plugins/echarts-grafana/data/world.json').then((Json) => {\r\n          echarts.registerMap('world', Json);\r\n        });\r\n      }\r\n\r\n      if (chartType === 'ChinaFlow') {\r\n        let planePath = 'path://M1705.06,1318.313v-89.254l-319.9-221.799l0.073-208.063c0.521-84.662-26.629-121.796-63.961-121.491c-37.332-0.305-64.482,36.829-63.961,121.491l0.073,208.063l-319.9,221.799v89.254l330.343-157.288l12.238,241.308l-134.449,92.931l0.531,42.034l175.125-42.917l175.125,42.917l0.531-42.034l-134.449-92.931l12.238-241.308L1705.06,1318.313z';\r\n        var color = ['#9ae5fc', '#dcbf71']; // 自定义图中要用到的颜色\r\n        let data=getData(chartType);\r\n        data.forEach(function (item){\r\n          series.push({\r\n              // 白色航线特效图\r\n              type: 'lines',\r\n              zlevel: 1, // 用于分层，z-index的效果\r\n              effect: {\r\n                show: true, // 动效是否显示\r\n                period: 6, // 特效动画时间\r\n                trailLength: 0.7, // 特效尾迹的长度\r\n                color: '#fff', // 特效颜色\r\n                symbolSize: 3 // 特效大小\r\n              },\r\n              lineStyle: {\r\n                normal: { // 正常情况下的线条样式\r\n                  color: color[0],\r\n                  width: 0, // 因为是叠加效果，要是有宽度，线条会变粗，白色航线特效不明显\r\n                  curveness: -0.2 // 线条曲度\r\n                }\r\n              },\r\n              data: convertData(item) // 特效的起始、终点位置\r\n            }, { // 小飞机航线效果\r\n              type: 'lines',\r\n              zlevel: 2,\r\n              //symbol: ['none', 'arrow'], // 用于设置箭头\r\n              symbolSize: 10,\r\n              effect: {\r\n                show: true,\r\n                period: 6,\r\n                trailLength: 0,\r\n                symbol: planePath, // 特效形状，可以用其他svg pathdata路径代替\r\n                symbolSize: 15\r\n              },\r\n              lineStyle: {\r\n                normal: {\r\n                  color: color[0],\r\n                  width: 1,\r\n                  opacity: 0.6,\r\n                  curveness: -0.2\r\n                }\r\n              },\r\n              data: convertData(item), // 特效的起始、终点位置，一个二维数组，相当于coords: convertData(item[1])\r\n            }, { // 散点效果\r\n              type: 'effectScatter',\r\n              coordinateSystem: 'geo',\r\n              zlevel: 3,\r\n              rippleEffect: {\r\n                brushType: 'stroke'\r\n              },\r\n              label: {\r\n                normal: {\r\n                  show: true,\r\n                  position: 'left',\r\n                  formatter: '{b}'\r\n                }\r\n              },\r\n              itemStyle: {\r\n                normal: {\r\n                  color: color[1]\r\n                }\r\n              },\r\n              data: cityData(item)\r\n            }\r\n\r\n          );\r\n          series.push({\r\n            type: 'effectScatter',\r\n            coordinateSystem: 'geo',\r\n            zlevel: 3,\r\n            rippleEffect: {\r\n              brushType: 'stroke'\r\n            },\r\n            label: {\r\n              normal: {\r\n                show: true,\r\n                position: 'left',\r\n                formatter: '{b}'\r\n              }\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                color: color[1]\r\n              }\r\n            },\r\n            data: scatterData(item)\r\n          })\r\n        });\r\n        const option = {\r\n          title: {\r\n            text: chartName,\r\n            left: 'center',\r\n            textStyle: {color: '#ffffff', fontSize: 12}\r\n          },\r\n          backgroundColor: '#404a59',\r\n          tooltip: {\r\n            trigger: 'item',\r\n            formatter: function (params) {\r\n              if (params.name){\r\n                return params.name\r\n              }else if(params.data.coord) {\r\n                return params.data.coord[2]\r\n              }\r\n            },\r\n            padding: 10,\r\n            backgroundColor: 'rgba(20,20,20,0.8)',\r\n          },\r\n          legend: {\r\n            orient: 'vertical',\r\n            left: 'left'\r\n          },\r\n          visualMap: {\r\n            min: chartMin,\r\n            max: chartMax,\r\n            calculable: true,\r\n            inRange: {\r\n              color: ['#50a3ba', '#eac736', '#d94e5d']\r\n            },\r\n            textStyle: {\r\n              color: '#fff'\r\n            }\r\n          },\r\n          geo: {\r\n            map: 'china',\r\n            roam:true,\r\n            label: {\r\n              emphasis: {\r\n                show: false\r\n              }\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                areaColor: '#323c48',\r\n                borderColor: '#111'\r\n              },\r\n              emphasis: {\r\n                areaColor: '#2a333d'\r\n              }\r\n            },\r\n          },\r\n          series :series,\r\n        };\r\n        myChart.setOption(option);\r\n        window.$.getJSON('public/plugins/echarts-grafana/data/china.json').then((Json) => {\r\n          echarts.registerMap('china', Json);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  ctrl.events.on('render', function () {\r\n    render();\r\n    ctrl.renderingCompleted();\r\n  });\r\n\r\n}\r\n"]}